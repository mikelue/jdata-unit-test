package guru.mikelue.jdut.jdbc;

import java.sql.SQLException;
import java.util.function.Consumer;

/**
 * Likes the {@link Consumer} inteface with throwing of {@link SQLException}.
 *
 * @param <T> The type of fed object
 *
 * @see JdbcSupplier
 * @see JdbcRunnable
 * @see SQLExceptionConvert
 */
@FunctionalInterface
public interface JdbcVoidFunction<T> extends JdbcFunction<T, Void> {
	/**
	 * Converts this expression to {@link Consumer}.
	 *
	 * @return The function with {@link SQLExceptionConvert#AS_RUNTIME_EXCEPTION}
	 *
	 * @see #asConsumer(SQLExceptionConvert)
	 */
	default Consumer<T> asConsumer()
	{
		return asConsumer(SQLExceptionConvert.AS_RUNTIME_EXCEPTION);
	}
	/**
	 * Converts this expression to {@link Consumer}, with customized {@link SQLExceptionConvert}.
	 *
	 * @param <E> The type of exception to be generated by
	 * @param exceptionConvert The instance for converting {@link SQLException} to exception of type {@literal <E>}
	 *
	 * @return The function with {@link SQLExceptionConvert}
	 *
	 * @see #asConsumer()
	 */
	default <E extends RuntimeException> Consumer<T> asConsumer(SQLExceptionConvert<E> exceptionConvert)
	{
		return t -> {
			try {
				simpleApply(t);
			} catch (SQLException e) {
				throw exceptionConvert.apply(e);
			}
		};
	}

	/**
	 * Implements the {@link JdbcFunction#apply} with returned value of null.
	 *
	 * @param jdbcObject The fed object
	 */
	default Void apply(T jdbcObject) throws SQLException
	{
		simpleApply(jdbcObject);
		return null;
	}

	/**
	 * Surrounds this function by {@link SurroundOperator}.
	 *
	 * @param surroundOperator The operator to build a new function to surround current function
	 *
	 * @return The surround function of result
	 *
	 * @see SurroundOperator
	 */
	@Override
	default JdbcVoidFunction<T> surroundedBy(SurroundOperator<T, Void> surroundOperator)
	{
		final JdbcFunction<T, Void> resultFunction = JdbcFunction.super.surroundedBy(surroundOperator);
		return (jdbcObject) -> resultFunction.apply(jdbcObject);
	}

	/**
	 * Consumes the object.
	 *
	 * @param jdbcObject The fed object
	 *
	 * @throws SQLException eliminate the exception block of JDBC
	 */
	public void simpleApply(T jdbcObject) throws SQLException;
}
