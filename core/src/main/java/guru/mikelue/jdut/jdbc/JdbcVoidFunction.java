package guru.mikelue.jdut.jdbc;

import java.sql.SQLException;
import java.util.function.Consumer;

import guru.mikelue.jdut.jdbc.JdbcFunction.SurroundOperator;

/**
 * Likes the {@link Consumer} inteface with throwing of {@link SQLException}.
 *
 * @param <T> The type of fed object
 *
 * @see JdbcSupplier
 * @see JdbcRunnable
 * @see SQLExceptionConvert
 */
@FunctionalInterface
public interface JdbcVoidFunction<T> {
	/**
	 * Creates this instance from {@link JdbcFunction}.
	 *
	 * @param <T> The type of fed object
	 * @param jdbcFunction The function of JDBC
	 *
	 * @return The using of <em>jdbcFunction</em> without returend value
	 */
	static <T> JdbcVoidFunction<T> fromJdbcFunction(JdbcFunction<T, Void> jdbcFunction)
	{
		return jdbcObject -> jdbcFunction.apply(jdbcObject);
	}

	/**
	 * Converts this expression to {@link Consumer}.
	 *
	 * @return The function with {@link SQLExceptionConvert#runtimeException SQLExceptionConvert::runtimeException}
	 *
	 * @see #asConsumer(SQLExceptionConvert)
	 */
	default Consumer<T> asConsumer()
	{
		return asConsumer(SQLExceptionConvert::runtimeException);
	}
	/**
	 * Converts this expression to {@link Consumer}, with customized {@link SQLExceptionConvert}.
	 *
	 * @param <E> The type of exception to be generated by
	 * @param exceptionConvert The instance for converting {@link SQLException} to exception of type {@literal <E>}
	 *
	 * @return The function with {@link SQLExceptionConvert}
	 *
	 * @see #asConsumer()
	 */
	default <E extends RuntimeException> Consumer<T> asConsumer(SQLExceptionConvert<E> exceptionConvert)
	{
		return t -> {
			try {
				apply(t);
			} catch (SQLException e) {
				throw exceptionConvert.apply(e);
			}
		};
	}

	/**
	 * Gets {@link JdbcFunction} by this void function.
	 *
	 * @return The null value of returned function
	 */
	default JdbcFunction<T, Void> asJdbcFunction()
	{
		return jdbcObject -> {
			apply(jdbcObject);
			return null;
		};
	}


	/**
	 * Surrounds this function by {@link SurroundOperator}.
	 *
	 * @param surroundOperator The operator to build a new function to surround current function
	 *
	 * @return The surround function of result
	 *
	 * @see SurroundOperator
	 */
	default JdbcFunction<T, Void> surroundedBy(SurroundOperator<T, Void> surroundOperator)
	{
		return asJdbcFunction().surroundedBy(surroundOperator);
	}

	/**
	 * Consumes the object.
	 *
	 * @param jdbcObject The fed object
	 *
	 * @throws SQLException eliminate the exception block of JDBC
	 */
	public void apply(T jdbcObject) throws SQLException;
}
